// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ChainSafe/gossamer/internal/pruner (interfaces: JournalDatabase,SetDeleter,Logger)

// Package pruner is a generated GoMock package.
package pruner

import (
	reflect "reflect"

	database "github.com/ChainSafe/gossamer/internal/database"
	gomock "github.com/golang/mock/gomock"
)

// MockJournalDatabase is a mock of JournalDatabase interface.
type MockJournalDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockJournalDatabaseMockRecorder
}

// MockJournalDatabaseMockRecorder is the mock recorder for MockJournalDatabase.
type MockJournalDatabaseMockRecorder struct {
	mock *MockJournalDatabase
}

// NewMockJournalDatabase creates a new mock instance.
func NewMockJournalDatabase(ctrl *gomock.Controller) *MockJournalDatabase {
	mock := &MockJournalDatabase{ctrl: ctrl}
	mock.recorder = &MockJournalDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJournalDatabase) EXPECT() *MockJournalDatabaseMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockJournalDatabase) Get(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockJournalDatabaseMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockJournalDatabase)(nil).Get), arg0)
}

// NewWriteBatch mocks base method.
func (m *MockJournalDatabase) NewWriteBatch() database.WriteBatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriteBatch")
	ret0, _ := ret[0].(database.WriteBatch)
	return ret0
}

// NewWriteBatch indicates an expected call of NewWriteBatch.
func (mr *MockJournalDatabaseMockRecorder) NewWriteBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriteBatch", reflect.TypeOf((*MockJournalDatabase)(nil).NewWriteBatch))
}

// MockSetDeleter is a mock of SetDeleter interface.
type MockSetDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockSetDeleterMockRecorder
}

// MockSetDeleterMockRecorder is the mock recorder for MockSetDeleter.
type MockSetDeleterMockRecorder struct {
	mock *MockSetDeleter
}

// NewMockSetDeleter creates a new mock instance.
func NewMockSetDeleter(ctrl *gomock.Controller) *MockSetDeleter {
	mock := &MockSetDeleter{ctrl: ctrl}
	mock.recorder = &MockSetDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetDeleter) EXPECT() *MockSetDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSetDeleter) Delete(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSetDeleterMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSetDeleter)(nil).Delete), arg0)
}

// Set mocks base method.
func (m *MockSetDeleter) Set(arg0, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSetDeleterMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSetDeleter)(nil).Set), arg0, arg1)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", arg0)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), arg0)
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}
